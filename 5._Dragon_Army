using System;
using System.Collections.Generic;
using System.Linq;

namespace _5._Dragon_Army
{
    class Program
    {
        static void Main(string[] args)
        {
            Dictionary<string, SortedDictionary<string, string>> allcolection = new Dictionary<string, SortedDictionary<string, string>>();
            int n = int.Parse(Console.ReadLine());
            for (int i = 0; i < n; i++)
            {
                string [] input = Console.ReadLine().Split(" ");
                string type = input[0];
                string name = input[1];
                double damage =0 ;
                double helth = 0;
                double armor = 0;
                if (input[2] == "null" || input[2] == "0")
                { damage = 45; }
                else
                { damage= double.Parse(input[2]); }

                if (input[3] == "null" || input[3] == "0")
                { helth = 250; }
                else { helth=
                    double.Parse(input[3]); }
                if (input[4] == "null" || input[4] == "0")
                { armor = 10; }
                else
                { armor = double.Parse(input[4]); }
                string parameterOfDragon = damage + ":" + helth + ":" + armor;

                if (!allcolection.ContainsKey(type))
                {
                    allcolection[type] = new SortedDictionary<string, string>();
                    allcolection[type][name] = parameterOfDragon;
                }
                else
                {
                        allcolection[type][name] = parameterOfDragon;
               
                }


            }

            foreach (var item in allcolection)
            {
                string type = item.Key;
             SortedDictionary<string,string> current= item.Value;
                double totalOne = 0;
                double totalTwo = 0;
                double totalTree = 0;
                string name = "";
                foreach (var inner in current)
                {
                     name = inner.Key;
                    string[] num = inner.Value.Split(":");
                    totalOne += double.Parse(num[0]);
                    totalTwo += double.Parse(num[1]);
                    totalTree += double.Parse(num[2]);
                   

                }

                totalOne = totalOne / current.Count;
                totalTwo /= current.Count;
                totalTree /= current.Count;
                Console.WriteLine($"{item.Key}::({totalOne:f2}/{totalTwo:f2}/{totalTree:f2})");
                foreach (var inner in current)
                {
                    name = inner.Key;
                    string[] num = inner.Value.Split(":");
                    string x = num[0];
                    string y = num[1];
                    string z = num[2];
                    Console.WriteLine($"-{name} -> damage: {x}, health: {y}, armor: {z}");

                }


            }

            
        }
    }
}
