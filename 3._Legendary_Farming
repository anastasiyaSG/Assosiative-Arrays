using System;
using System.Collections.Generic;
using System.Linq;

namespace _3._Legendary_Farming
{
    class Program
    {
        static void Main(string[] args)
        {
            Dictionary<string, int> keyMaterials = new Dictionary<string, int>();
            keyMaterials.Add("motes", 0);
            //keyMaterials["motes"]=0;
            keyMaterials.Add("fragments", 0);
            keyMaterials.Add("shards", 0);
                Dictionary<string, int> junkMaterials = new Dictionary<string, int>();


            while (true)
            {
                string []input = Console.ReadLine().Split();
                bool hasToBrake = false;
                for (int i = 0; i < input.Length; i+=2)
                {
                    int quantity = int.Parse(input[i]);
                    string material = input[i+1].ToLower();
                    if (material == "shards" || material == "fragments" || material == "motes")
                    {
                        keyMaterials[material] += quantity;
                        if (keyMaterials[material] >= 250)

                        {
                            keyMaterials[material] -= 250;
                            if (material == "shards")
                            { Console.WriteLine("Shadowmourne obtained!"); }
                            if (material == "fragments")
                            { Console.WriteLine("Valanyr obtained!"); }
                            if (material == "motes")
                            { Console.WriteLine("Dragonwrath obtained!"); }
                            hasToBrake = true;
                            break;
                        }
                    }

                    else
                    {
                        if (junkMaterials.ContainsKey(material) == false)
                        {
                            junkMaterials[material] = 0;
                        }
                        junkMaterials[material] += quantity;
                    }
                }
                if (hasToBrake)
                { break; }
                
            }
            foreach (var kvp in keyMaterials.OrderByDescending(x=>x.Value
            ).ThenBy(kvp => kvp.Key))
            {
                string material = kvp.Key;
                int quantity = kvp.Value;
                Console.WriteLine($"{material}: {quantity}");


            }
            foreach (var kvp in junkMaterials.OrderBy(x => x.Key))
            {
                string material = kvp.Key;
                int quantity = kvp.Value;
                Console.WriteLine($"{material}: {quantity}");
            }
            }
        }
}
